##############################################################################
##
## This contains the important Library bash functions that are needed for 
## APIGateway CI/CD process.
## All Library methods in this file use the current directory i.e binary
## as the root directory.
## 
##############################################################################



##############################################################################
##
## Ping an API Gateway Server.
## This checks for the liveliness of the apigateway server 
## by pinging it for a fixed number of iterations.
## The pause time interval for every ping is
## also configurable.
## 
## Usage: ping_apigateway_server <SERVER_URL> <PAUSE_INTERVAL> <ITERATION_COUNT>
##############################################################################
ping_apigateway_server() {

	SERVER=$1
	PAUSE=$2
	ITERATIONS=$3
	HEALTH_URL=rest/apigateway/health

	while true 
	do
		if [ $ITERATIONS -eq 0 ]
		then
			return 0
		fi
		curl -k -sSf $SERVER/$HEALTH_URL > /dev/null 2>&1
		CS=$?
		if [ $CS -ne 0 ]
		then
			echo "$SERVER is down"
			((ITERATIONS=ITERATIONS-1))
		elif [ $CS -eq 0 ]
		then
			return 1
		fi
		sleep $PAUSE
	done
}

##############################################################################
## Import an API to the API Gateway Server.
## Usage: import_api <api_project> <url> <username> <password>
##############################################################################
import_api() {

	api_project=$1
	url=$2
	username=$3
	password=$4
	BIN_DIR="$PWD"
	CURR_DIR="../../"
	API_DIR=$5/$api_project
        curl -k -Sv -i -X POST $url/rest/apigateway/archive?overwrite=APIs,policies -H "Content-Type:application/zip" -H "Accept:application/json" --data-binary @"$CURR_DIR/$api_project.zip" -u $username:$password > /dev/null
	
}
##############################################################################
## Import an API Source to the API Gateway Server.
## Usage: import_api <api_project> <url> <username> <password>
##############################################################################
import_source_api() {

	api_project=$1
	url=$2
	username=$3
	password=$4
	BIN_DIR="$PWD"
	CURR_DIR="../"
	API_DIR=$5/$api_project
	ROOTFILENAME=$6
	IDAPI=$7
	TYPEAPI=$8		
		ls -altr $API_DIR
		echo "Sending"
		curl -k --location --request PUT "${url}/rest/apigateway/apis/${IDAPI}" \
      --header "Content-Type: multipart/form-data" \
      --form "file=@\"${API_DIR}/${api_project}.zip\"" \
      --form "apiName=\"${api_project}\"" \
      --form "type=\"${TYPEAPI}\"" \
      --form "rootFileName=\"${ROOTFILENAME}\"" -u $username:$password
}
##############################################################################
## export an API Source to the API Gateway Server.
## Usage: import_api <api_project> <url> <username> <password>
##############################################################################
export_source_api() {
	api_project=$1
	url=$2
	username=$3
	password=$4
	BIN_DIR="$PWD"
	CURR_DIR="../"
	API_DIR=$5/$api_project
	IDAPI=$6	
		ls -altr $API_DIR
		echo "Sending"		
		curl -k -s -f --location --request GET "${url}/rest/apigateway/apis/${IDAPI}/source" -u $username:$password --output $API_DIR/$api_project.zip
		echo "${url}/rest/apigateway/apis/${IDAPI}/source"
		curl -k -s -f --location --request GET "${url}/rest/apigateway/apis/${IDAPI}?format=swagger" -u $username:$password --output $API_DIR/$api_project.json
		echo "${url}/rest/apigateway/apis/${IDAPI}?format=swagger"
		ls -altr $API_DIR
}
##############################################################################
## Import Configurations to the API Gateway Server.
## Usage: import_configurations <configuration_name> <url> <username> <password>
##############################################################################
import_configurations() {

	configuration_name=$1
	url=$2
	username=$3
	password=$4
	stage=$5
	BIN_DIR="$PWD"
	CURR_DIR="../"
	CONF_DIR=$configuration_name
	if [ -d "$CONF_DIR" ] 
	then
		cd $CONF_DIR && zip -r config.zip ./*
		curl -k -S -i -X POST $url/rest/apigateway/archive?overwrite=APIs,policies -H "Content-Type:application/zip" -H"Accept:application/json" --data-binary @"config.zip" -u $username:$password > /dev/null
		rm config.zip
	else
		echo "The Configuration with name $configuration_name does not exists as a flat file."
	fi
	cd $BIN_DIR
}
##############################################################################
## Export an API from the API Gateway Server.
## Usage: export_api <api_project> <url> <username> <password>
##############################################################################
export_api() {
	api_project=$1
	url=$2
	username=$3
	password=$4
	BIN_DIR="$PWD"
	CURR_DIR="../../"
	API_DIR=$5/$api_project
	payloadid=$6
	curl -k -v $url/rest/apigateway/archive?apis=$payloadid  --output $CURR_DIR/$api_project.zip -u $username:$password -H "x-HTTP-Method-Override:GET"
	echo $url/rest/apigateway/archive?apis=$payloadid
	ls $CURR_DIR
}
##############################################################################
## Export an API from the API Gateway Server.
## Usage: export_api <api_project> <url> <username> <password>
##############################################################################
export_configurations() {
	configuration_name=$1
	url=$2
	username=$3
	password=$4
	BIN_DIR="$PWD"
	CURR_DIR="../"
	CONF_DIR=$configuration_name
	
	if [ -d "$CONF_DIR" ] 
	then
	curl -k -s $url/rest/apigateway/archive -d @"$CONF_DIR/export_payload.json" --output config.zip -u $username:$password -H "x-HTTP-Method-Override:GET" -H "Content-Type:application/json"
	unzip -o config.zip -d $CONF_DIR/
	rm config.zip
	else
	echo "The Configuration with name $configuration_name does not exists in the flat file."
	fi
}

##############################################################################
## Get an API from the API Gateway Server.
## Usage: get_api <api_project> <url> <username> <password>
##############################################################################
get_api() {
	nameapi=$1
	URLAPIGATEWAY=$2
	USERNAMEAPI=$3
	PASSWORDAPI=$4	
  
	curl -k --location --request POST $URLAPIGATEWAY/rest/apigateway/search \
    --header 'Content-Type: application/json' \
    --data-raw ' {
      "types" : ["api"], 
      "scope":[ 
         { 
             "attributeName" : "apiName", 
             "keyword" : "'"$nameapi"'" 
         }
      ] 
    }' -u $USERNAMEAPI:$PASSWORDAPI --output info.json
}

##############################################################################
## Get all API from the API Gateway Server.
## Usage: get_api <url> <username> <password>
##############################################################################
get_all_api() {
	URLAPIGATEWAY=$1
	USERNAMEAPI=$2
	PASSWORDAPI=$3
  
	curl -k --location --request POST $URLAPIGATEWAY/rest/apigateway/search \
    --header 'Content-Type: application/json' \
    --data-raw ' {
      "types" : ["api"] 
    }' -u $USERNAMEAPI:$PASSWORDAPI --output info.json
}


############################################################################################################################################################
## Run a single test suite pointing to a postman collection
## This method allows to pass ';' seperated postman environmental variables.
## Usage run_test <collection_name> <environment_file_location> <environment_Variables> <test_result_folder>
############################################################################################################################################################
run_test() {
 test_collection=$1
 environment_file=$2
 env_vars=$3
 result_folder=$4
 

 
 newman_environment=
 
 if [ ! -z "$env_vars" ]
 then
    split $env_vars ";"
	echo $env_vars_array
	for i in "${env_vars_array[@]}"  
	do  
		newman_environment="$newman_environment --env-var $i "
	done  
 fi
 
 
 echo "Running postman tests"
 echo "Environment:$environment_file"
 
 if [ -z "$newman_environment" ] 
 then
  newman run $test_collection  --reporters cli,junit,html --reporter-junit-export $result_folder/$RANDOM.xml -e $environment_file --reporter-html-export $result_folder/index.html
 else 
  newman run $test_collection  --reporters cli,junit,html --reporter-junit-export $result_folder/$RANDOM.xml -e $environment_file $newman_environment --reporter-html-export $result_folder/index.html
 fi
}

############################################################################################################################################################
## Run the entire postman test suite pointing to an API Gateway server.
## 
## When 'all' is passed all tests under tests/test-suites are run
## Usage run_test_suite <test_suite> <environment_file_location> <api_gateway_server> <test_result_folder>
############################################################################################################################################################

run_test_suite() {

    test_suite=$1
	environment_file_location=$2
	apigateway_server_url=$3
	result_folder=$4
	if [ -d "$result_folder" ] 
	then
		rm -R $result_folder
	fi
 
   mkdir $result_folder
	
	CURR_DIR="../"
	API_DIR=$CURR_DIR/tests/test-suites/

	
	echo "Running tests for API gateway"
	if [ $test_suite = "all" ] 
	then 
	for file in $API_DIR/*; do
		run_test $file $2 "httpInvokeUrl=$apigateway_server_url" $4
	done
	exit
	fi

	run_test $test_suite $2  "httpInvokeUrl=$apigateway_server_url" $4
}

############################################################################################################################################################
## Promotes an API Project using the API Gateway Promotion management API.
## Usage promote_api <api_project> <environment_file_location> <environment_Variables>
############################################################################################################################################################
promote_api() {   
   DATA=$(date +"%m%d%Y_%H%M")
   CURR_DIR="../"
   curl -k --location --request POST "$URLAPIGATEWAY/rest/apigateway/promotion/?overwrite=true" \
	--header "Content-Type: application/json" \
	--data-raw "{
	    \"description\": \"$DEPLOY_APPS\",
	    \"name\": \"Deploy_${DEPLOY_APPS}_${DATA}\",
	    \"destinationStages\": [
		\"$DESTINATIONSTAGES\"
	    ],
	    \"promotedAssets\": {
		\"api\": [ $apideploy ]
	    },
	    \"includeApis\": true    
	}" -u $USERNAMEAPI:$PASSWORDAPI
	
   echo "Deploy_${DEPLOY_APPS}_${DATA}" >> nameDeploy.txt
} 

############################################################################################################################################################
## Promotes an API Project using the API Gateway Promotion management API.
## Usage promote_api <api_project> <environment_file_location> <environment_Variables>
############################################################################################################################################################
rollbaks_api() {   
   curl  -k --location --request GET "$URLAPIGATEWAY/rest/apigateway/rollback" --header "Accept: application/json" -u $USERNAMEAPI:$PASSWORDAPI -o rollbacks.json
} 

############################################################################################################################################################
## Promotes an API Project using the API Gateway Promotion management API.
## Usage promote_api <api_project> <environment_file_location> <environment_Variables>
############################################################################################################################################################
rollbak_do_api() {   
   curl  -k --location --request PUT "$URLAPIGATEWAY/rest/apigateway/rollback/$IDROLLBACK" -u $USERNAMEAPI:$PASSWORDAPI
} 


##############################################################################
## Utility method to split a input with an delimter
## Usage split input delimiter
## Output array of the string that is split.
##############################################################################
split() {
  input=$1
  delimiter=$2
  string=$input$delimiter

#Split the text based on the delimiter
env_vars_array=()
while [[ $string ]]; do
  env_vars_array+=( "${string%%"$delimiter"*}" )
  string=${string#*"$delimiter"}
done
}

##############################################################################
## Active API to the API Gateway Server.
## Usage: import_api <api_project> <url> <username> <password>
##############################################################################
active_api() {
	api_id=$1
	url=$2
	username=$3
	password=$4	
	curl --location --request PUT "${url}/rest/apigateway/apis/${api_id}/activate" \
	  -u $USERNAMEAPI:$PASSWORDAPI
}

##############################################################################
## Deactive API to the API Gateway Server.
## Usage: import_api <api_project> <url> <username> <password>
##############################################################################
deactive_api() {
	api_id=$1
	url=$2
	username=$3
	password=$4	
	curl --location --request PUT "${url}/rest/apigateway/apis/${api_id}/deactivate" \
	  -u $USERNAMEAPI:$PASSWORDAPI
}

get_all_policy
##############################################################################
## Get all POLICY from the API Gateway Server.
## Usage: get_api <url> <username> <password>
##############################################################################
get_all_policy() {
	URLAPIGATEWAY=$1
	USERNAMEAPI=$2
	PASSWORDAPI=$3
  
	curl -k --location --request POST $URLAPIGATEWAY/rest/apigateway/search \
    --header 'Content-Type: application/json' \
    --data-raw ' {
       "types" : ["POLICY"],
       "responseFields" : ["names","policyEnforcements"] 
    }' -u $USERNAMEAPI:$PASSWORDAPI --output info.json
}
